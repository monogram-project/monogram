HELP OPTIONS                                        Stephen Leach, Feb 2025

    uses options;

An implementation of a flexible mapping of names (words) to values based
on a balanced binary tree. It is reasonably compact and reasonably fast and
is ideal for small/medium sized collections (< 100s of entries).


--------------
1  Recognisers
--------------

is_null_options(opts) -> bool
        Returns true if options is empty, false otherwise.


isoptions(item) -> bool
        Returns true if item is a dict, false otherwise.


---------------
2  Constructors
---------------

newoptions() -> dict
newoptions(-&- name=value, ...) -> dict
        This constructs a dict from an optional list of name-value
        pairs.


------------
3  Accessors
------------

options_destnames(opts) -> (name1, name2, ..., nameN, N )
        This returns all the names in options opts on the stack and
        a count of them too. The names will be sorted in lexicographical
        order.


options_destvalues(opts) -> (value1, value2, ..., valueN, N)
        This returns all the values of options opts on the stack and a count
        of them too. The values are returned in the same order as
        the keys.


OPTIONS( name ) -> value
value -> OPTIONS(name)
subscroptions(name, opts) -> value
value -> subscroptions(name, opts)
        This returns or updates the value associated with the name in the
        options opts. subscroptions is the class_apply of the options_key.


----------------
4  Miscellaneous
----------------

appoptions(opts, procedure )
        Applies the  procedure  p to each name-value pair in opts.
        The procedure p is applied as:

            p(name, value)

        for each name/value pair in dict.


options_key -> key
        Constant holding key structure for options.


length_options(opts) -> N
        Returns the number N of name/values pairs in opts.


--- Copyright (c) GetPoplog, 5th Feb 2025
-------------------------------------------

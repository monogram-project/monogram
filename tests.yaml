# The top-level normalization flag applies to all tests unless overridden.
normalize: xml
tests:

  - name: "Convert number to XML"
    command: "{command} --format xml"
    input: |
      99
    expected_output: |
      <unit><number value="99"/></unit>

  - name: "Test with override (no normalization)"
    command: "{command} --format xml  --indent 4"
    input: |
      123
    expected_output: |
      <unit>
          <number value="123" />
      </unit>
    normalize: none

  - name: "Simple string"
    command: "{command} --format xml --indent 2"
    input: |
      "Hello, world!\n"
    expected_output: |
      <unit>
        <string quote="double" value="Hello, world!&#xA;"/>
      </unit>

  - name: "Interpolations"
    command: "{command} --format xml --indent 2"
    input: |
      "Hello, \(name)! It's a great \{dayOfWeek}!"
    expected_output: |
      <unit>
        <join quote="double">
          <string quote="double" value="Hello, "/>
          <interpolation kind="parentheses">
            <identifier name="name"/>
          </interpolation>
          <string quote="double" value="! It's a great "/>
          <interpolation kind="braces">
            <identifier name="dayOfWeek"/>
          </interpolation>
          <string quote="double" value="!"/>
        </join>
      </unit>

  - name: "Raw string"
    command: "{command} --format xml --indent 2"
    input: |
      \"Hello, world!\n"
    expected_output: |
      <unit>
        <string quote="double" value="Hello, world!\n"/>
      </unit>

  - name: "Multiline string"
    command: "{command} --format xml --indent 2"
    input: |
      """
      Hello, world!\_
          This is a test.
      And this is another line.
      """
    expected_output: |
      <unit>
        <joinlines quote="double">
          <string quote="double" value="Hello, world!"/>
          <string quote="double" value="    This is a test."/>
          <string quote="double" value="And this is another line."/>
        </joinlines>
      </unit>

  - name: "Multiline string with interpolations"
    command: "{command} --format xml --indent 2"
    input: |
      """
      Hello, world!\_
          This is a \{test.example}.
      And this is another line.
      """
    expected_output: |
      <unit>
        <joinlines quote="double">
          <string quote="double" value="Hello, world!"/>
          <join quote="double">
            <string quote="double" value="    This is a "/>
            <interpolation kind="braces">
              <get name="example">
                <identifier name="test"/>
              </get>
            </interpolation>
            <string quote="double" value="."/>
          </join>
          <string quote="double" value="And this is another line."/>
        </joinlines>
      </unit>

  - name: "Raw Multiline string"
    command: "{command} --format xml --indent 2"
    input: |
      \"""
      Hello, world!\_
          This is a test.
      And this is another line.
      """
    expected_output: |
      <unit>
        <joinlines quote="double">
          <string quote="double" value="Hello, world!\_"/>
          <string quote="double" value="    This is a test."/>
          <string quote="double" value="And this is another line."/>
        </joinlines>
      </unit>

  - name: "Factorial example"
    command: "{command} --format xml --one --default-breaker more"
    input: |
      # The factorial function in monogram.
      def f(n):
          if n <= 1:
              1
          else:
              n * f(n - 1)
          endif
      enddef
    expected_output: |
      <form syntax="surround">
        <part keyword="def">
          <apply kind="parentheses" separator="undefined">
            <identifier name="f"/>
            <arguments>
              <identifier name="n"/>
            </arguments>
          </apply>
        </part>
        <part keyword="more">
          <form syntax="surround">
            <part keyword="if">
              <operator name="&lt;=" syntax="infix">
                <identifier name="n"/>
                <number value="1"/>
              </operator>
            </part>
            <part keyword="more">
              <number value="1"/>
            </part>
            <part keyword="else">
              <operator name="*" syntax="infix">
                <identifier name="n"/>
                <apply kind="parentheses" separator="undefined">
                  <identifier name="f"/>
                  <arguments>
                    <operator name="-" syntax="infix">
                      <identifier name="n"/>
                      <number value="1"/>
                    </operator>
                  </arguments>
                </apply>
              </operator>
            </part>
          </form>
        </part>
      </form>
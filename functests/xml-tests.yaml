# The top-level normalization flag applies to all tests unless overridden.
normalize: xml
tests:

  - name: "Convert identifer to XML"
    command: "{command} --format xml --include-spans"
    input: |
      xyz
    expected_output: |
      <unit span="1 1 2 1">
        <identifier name="xyz" span="1 1 1 4"/>
      </unit>

  - name: "Convert identifer to XML"
    command: "{command} --format xml"
    input: |
      xyz
    expected_output: |
      <unit><identifier name="xyz"/></unit>

  - name: "Convert identifer with interior back-underbar to XML"
    command: "{command} --format xml"
    input: |
      x\_z
    expected_output: |
      <unit><identifier name="xz"/></unit>

  - name: "Convert identifer with final back-underbar to XML"
    command: "{command} --format xml"
    input: |
      xy\_
    expected_output: |
      <unit><identifier name="xy"/></unit>

  - name: "Convert identifer with leading back-underbar to XML"
    command: "{command} --format xml"
    input: |
      \_yz
    expected_output: |
      <unit><identifier name="yz"/></unit>

  - name: "Convert number to XML"
    command: "{command} --format xml"
    input: |
      99
    expected_output: |
      <unit><number value="99"/></unit>

  - name: "Convert number to XML"
    command: "{command} --format xml"
    input: |
      99.123
    expected_output: |
      <unit><number value="99.123"/></unit>

  - name: "Convert number to XML"
    command: "{command} --format xml"
    input: |
      99.123e-456
    expected_output: |
      <unit><number value="99.123e-456"/></unit>

  - name: "Convert number to XML"
    command: "{command} --format xml"
    input: |
      -99e-1_456
    expected_output: |
      <unit><number value="-99e-1_456"/></unit>

  - name: "Test with override (no normalization)"
    command: "{command} --format xml  --indent 4"
    input: |
      123
    expected_output: |
      <unit>
          <number value="123" />
      </unit>
    normalize: none

  - name: "Test with override (no normalization)"
    command: "{command} --format xml  --indent 2"
    input: |
      -1_234
    expected_output: |
      <unit>
        <number value="-1_234" />
      </unit>
    normalize: none

  - name: "Simple string"
    command: "{command} --format xml --indent 2"
    input: |
      "Hello, world!\n"
    expected_output: |
      <unit>
        <string quote="double" value="Hello, world!&#xA;"/>
      </unit>

  - name: "Interpolations"
    command: "{command} --format xml --indent 2"
    input: |
      "Hello, \(name)! It's a great \{dayOfWeek}!"
    expected_output: |
      <unit>
        <join quote="double">
          <string quote="double" value="Hello, "/>
          <interpolation kind="parentheses">
            <identifier name="name"/>
          </interpolation>
          <string quote="double" value="! It's a great "/>
          <interpolation kind="braces">
            <identifier name="dayOfWeek"/>
          </interpolation>
          <string quote="double" value="!"/>
        </join>
      </unit>

  - name: "Raw string"
    command: "{command} --format xml --indent 2"
    input: |
      \"Hello, world!\n"
    expected_output: |
      <unit>
        <string quote="double" value="Hello, world!\n"/>
      </unit>

  - name: "Multiline string"
    command: "{command} --format xml --indent 2"
    input: |
      """
      Hello, world!\_
          This is a test.
      And this is another line.
      """
    expected_output: |
      <unit>
        <joinlines quote="double">
          <string quote="double" value="Hello, world!"/>
          <string quote="double" value="    This is a test."/>
          <string quote="double" value="And this is another line."/>
        </joinlines>
      </unit>

  - name: "Multiline string with interpolations"
    command: "{command} --format xml --indent 2"
    input: |
      """
      Hello, world!\_
          This is a \{test.example}.
      And this is another line.
      """
    expected_output: |
      <unit>
        <joinlines quote="double">
          <string quote="double" value="Hello, world!"/>
          <join quote="double">
            <string quote="double" value="    This is a "/>
            <interpolation kind="braces">
              <get name="example">
                <identifier name="test"/>
              </get>
            </interpolation>
            <string quote="double" value="."/>
          </join>
          <string quote="double" value="And this is another line."/>
        </joinlines>
      </unit>

  - name: "Raw Multiline string"
    command: "{command} --format xml --indent 2"
    input: |
      \"""
      Hello, world!\_
          This is a test.
      And this is another line.
      """
    expected_output: |
      <unit>
        <joinlines quote="double">
          <string quote="double" value="Hello, world!\_"/>
          <string quote="double" value="    This is a test."/>
          <string quote="double" value="And this is another line."/>
        </joinlines>
      </unit>

  - name: "Factorial example"
    command: "{command} --format xml --one --default-breaker more"
    input: |
      # The factorial function in monogram.
      def f(n):
          if n <= 1:
              1
          else:
              n * f(n - 1)
          endif
      enddef
    expected_output: |
      <form syntax="surround">
        <part keyword="def">
          <apply kind="parentheses" separator="undefined">
            <identifier name="f"/>
            <arguments>
              <identifier name="n"/>
            </arguments>
          </apply>
        </part>
        <part keyword="more">
          <form syntax="surround">
            <part keyword="if">
              <operator name="&lt;=" syntax="infix">
                <identifier name="n"/>
                <number value="1"/>
              </operator>
            </part>
            <part keyword="more">
              <number value="1"/>
            </part>
            <part keyword="else">
              <operator name="*" syntax="infix">
                <identifier name="n"/>
                <apply kind="parentheses" separator="undefined">
                  <identifier name="f"/>
                  <arguments>
                    <operator name="-" syntax="infix">
                      <identifier name="n"/>
                      <number value="1"/>
                    </operator>
                  </arguments>
                </apply>
              </operator>
            </part>
          </form>
        </part>
      </form>

  - name: "Form no semicolons"
    command: "{command} --format xml --indent 2"
    input: |
      block 1 2 endblock
    expected_exit_status: 1

  - name: "Form semicolon separators"
    command: "{command} --format xml --indent 2"
    input: |
      block 1; 2 endblock
    expected_output: |
      <unit>
        <form syntax="surround">
          <part keyword="block">
            <number value="1"/>
            <number value="2"/>
          </part>
        </form>
      </unit>

  - name: "Form semicolon terminators"
    command: "{command} --format xml --indent 2"
    input: |
      block 1; 2; endblock
    expected_output: |
      <unit>
        <form syntax="surround">
          <part keyword="block">
            <number value="1"/>
            <number value="2"/>
          </part>
        </form>
      </unit>


  - name: "Form semicolon early"
    command: "{command} --format xml --indent 2"
    input: |
      block ; 1; 2; endblock
    expected_exit_status: 1

  - name: "Form semicolon doubled up"
    command: "{command} --format xml --indent 2"
    input: |
      block 1; ; 2 endblock
    expected_exit_status: 1

  - name: "Form line breaks"
    command: "{command} --format xml --indent 2"
    input: |
      block 
        1
        2 
      endblock
    expected_output: |
      <unit>
        <form syntax="surround">
          <part keyword="block">
            <number value="1"/>
            <number value="2"/>
          </part>
        </form>
      </unit>

  - name: "Form line breaks with semicolon"
    command: "{command} --format xml --indent 2"
    input: |
      block 
        1;
        2;
      endblock
    expected_output: |
      <unit>
        <form syntax="surround">
          <part keyword="block">
            <number value="1"/>
            <number value="2"/>
          </part>
        </form>
      </unit>

  - name: "Prefix form - no arg"
    command: "{command} --format xml --indent 2"
    input: |
      return!
    expected_output: |
      <unit>
        <form syntax="prefix">
          <part keyword="return" />
        </form>
      </unit>

  - name: "Prefix form - one arg"
    command: "{command} --format xml --indent 2"
    input: |
      return! 99
    expected_output: |
      <unit>
        <form syntax="prefix">
          <part keyword="return">
            <number value="99"/>
          </part>
        </form>
      </unit>

  - name: "Prefix form - two args with whitespace"
    command: "{command} --format xml --indent 2"
    input: |
      while! (x) { (x, t) = f(x)}
    expected_output: |
      <unit>
        <form syntax="prefix">
          <part keyword="while">
            <delimited kind="parentheses" separator="undefined">
              <identifier name="x"/>
            </delimited>
          </part>
          <part keyword="_">
            <delimited kind="braces" separator="undefined">
              <operator name="=" syntax="infix">
                <delimited kind="parentheses" separator="comma">
                  <identifier name="x"/>
                  <identifier name="t"/>
                </delimited>
                <apply kind="parentheses" separator="undefined">
                  <identifier name="f"/>
                  <arguments>
                    <identifier name="x"/>
                  </arguments>
                </apply>
              </operator>
            </delimited>
          </part>
        </form>
      </unit>


  - name: "Prefix form - 3 args, with whitespace"
    command: "{command} --format xml --indent 2"
    input: |
      foo! 99 88 77
    expected_output: |
      <unit>
        <form syntax="prefix">
          <part keyword="foo">
            <number value="99"/>
          </part>
          <part keyword="_">
            <number value="88"/>
          </part>
          <part keyword="_">
            <number value="77"/>
          </part>
        </form>
      </unit>




